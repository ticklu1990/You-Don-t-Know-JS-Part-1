
In a computer language, [a group of words], [numbers], and [operators] that performs a [specific-task] is a statement.In JavaScript,a statement might look as follows:

  a = b * 2;

  The characters a and b are called variables (see "Variables"), which are like [simple boxes] you can store any of your stuff in. 
   
   In programs, [variables] hold values (like the number 42) to be used by the [program].
   
   Think of them as [symbolic (placeholders)] for the [values] themselves.
   
   the 2 is just a value itself, called a [literal value], because it stands alone without being [stored] in a [variable]
   
   The = and * characters are (operators), (see "Operators") -- 
   they perform (actions) with the [values] and [variables] such as [assignment] and [mathematic] multiplication.
   
   Most (statements) in (JavaScript) conclude with a semicolon (;) at the end.
   The statement a = b * 2; tells the computer, roughly, to get the current value stored in the variable b, 
   multiply that value by 2, then store the result back into another variable we call a.
   
   [Programs] are just [collections] of many such [statements], 
   which together describe all the steps that it takes to perform your program's purpose.
   
   [Expressions]:
   
   #(Statements) are made up of one or more (expressions). 
   An [expression] is any [reference] to a [variable] or [value], or a set of [variable(s)] and [value(s)] combined with (operators).
   
   For example:
    a = b * 2;
    
    #This statement has four expressions in it:
     
      2 is a [literal-value] expression
      b is a [variable-expression], which means to retrieve its [current value].
      b * 2 is an [arithmetic-expression], which means to do the [multiplication].
      a = b * 2 is an [assignment expression], 
      which means to assign the result of the b * 2 [expression] to the [variable] a (more on assignments later).
      
      
      
   
   
   
   
   
   

